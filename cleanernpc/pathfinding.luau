local RunService = game:GetService("RunService")
local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SimplePath = require(ServerStorage.SimplePath)

local npc = script.Parent
local root = npc:FindFirstChild("HumanoidRootPart")
local humanoid = npc:FindFirstChildOfClass("Humanoid")

if not root or not humanoid then 
	warn("NPC missing root or humanoid!")
	return 
end

local SpObj = SimplePath.new(npc)
SpObj.Visualize = true

local stopDistance = 2
local footprintQueue = {} -- Store footprints in a table
local isCleaning = false
local isReturning = false
local startPosition = root.Position -- Save the NPC's starting position

-- **üè† Return NPC to starting position**
local function returnToStart()
	if isReturning or isCleaning then return end
	isReturning = true

	print("Returning to starting position:", startPosition)
	local success = SpObj:Run(startPosition)

	if success then
		SpObj.Reached:Once(function()
			print("NPC returned to starting position.")
			isReturning = false
		end)
	else
		warn("Pathfinding to start position failed!")
		isReturning = false
	end
end

-- **üßπ Process footprints**
local function processFootprints()
	if isCleaning then return end
	isCleaning = true
	isReturning = false -- Stop returning if new footprints appear

	while next(footprintQueue) do
		local footprints = {}
		for footprint, _ in pairs(footprintQueue) do
			if footprint and footprint.Parent then
				table.insert(footprints, footprint)
			else
				footprintQueue[footprint] = nil
			end
		end

		table.sort(footprints, function(a, b)
			return (root.Position - a.Position).Magnitude < (root.Position - b.Position).Magnitude
		end)

		for _, footprint in ipairs(footprints) do
			local targetPos = footprint.Position
			local direction = (targetPos - root.Position).Unit
			local adjustedPosition = targetPos - (direction * stopDistance)

			print("Moving to footprint:", footprint, "Adjusted Pos:", adjustedPosition)

			local success = SpObj:Run(adjustedPosition)
			if success then
				SpObj.Reached:Once(function()
					if footprint and footprint.Parent then
						print("Reached footprint:", footprint)
						footprint:Destroy()
						footprintQueue[footprint] = nil
						ReplicatedStorage.PartDestroyedEvent:Fire() -- Fire event when a footprint is cleaned
						print("Fired PartDestroyedEvent!")
					end
				end)
			else
				warn("Pathfinding failed!")
				footprintQueue[footprint] = nil
			end

			task.wait(1.5)
		end
	end

	isCleaning = false

	if next(footprintQueue) then
		task.spawn(processFootprints) -- Immediately restart if more footprints exist
	else
		task.wait(3) -- Wait a bit before returning to start
		returnToStart()
	end
end

-- **üìå Add footprint to queue**
local function addFootprint(footprint)
	if not footprintQueue[footprint] then
		footprintQueue[footprint] = true
		print("Added footprint:", footprint, "Total:", table.maxn(footprintQueue) or 0)

		task.spawn(processFootprints) -- Always restart processing if new footprints appear
	end
end

-- **üë£ Detect new footprints**
workspace.ChildAdded:Connect(function(child)
	if child:IsA("BasePart") and child.Name == "SpawnPart" then
		print("New footprint detected:", child)
		addFootprint(child)
	end
end)
